# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  CI:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@f3364599c6aa293cdc2b8391b1b56d0c30e45c8a
        uses: docker/login-action@v1.8.0
        with:
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKERHUB_USER }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Criando a Imagem Docker
        uses: docker/build-push-action@v2.3.0
        with:
          context: ./src
          file: ./src/Dockerfile
          tags: |
            tiagoaneves/api-produto:latest
            tiagoaneves/api-produto:${{ github.run_number }}
          push: true
  CD:
    needs: [CI]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1
        with:
          # Kubernetes Config
          kubeconfig: ${{ secrets.K8S_CONFIG }}
      - name: 'Write Config & Key Files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          cp ~/bin/oci /bin/
      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file  ~/.oci/config
          oci setup repair-file-permissions --file  ~/.oci/key.pem
      - name: Deploy MONGODB
        uses: Azure/k8s-deploy@v1.3
        with:
          # Path to the manifest files which will be used for deployment.
          manifests: |
            k8s/mongodb/deployment.yaml
            k8s/mongodb/service.yaml
      - name: Deploy API
        uses: Azure/k8s-deploy@v1.3
        with:
          # Path to the manifest files which will be used for deployment.
          manifests: |
            k8s/api/deployment.yaml
            k8s/api/service.yaml
            
         
